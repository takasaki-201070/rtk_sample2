[{"C:\\Users\\takasaki\\react\\rtk_sample\\src\\index.tsx":"1","C:\\Users\\takasaki\\react\\rtk_sample\\src\\layouts\\main\\Header.tsx":"2","C:\\Users\\takasaki\\react\\rtk_sample\\src\\App.tsx":"3","C:\\Users\\takasaki\\react\\rtk_sample\\src\\layouts\\main\\LeftSideList.tsx":"4","C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\UseStateSample\\index.tsx":"5","C:\\Users\\takasaki\\react\\rtk_sample\\src\\serviceWorker.ts":"6","C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\UseEffect1Sample\\index.tsx":"7","C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\UseEffect2Sample\\index.tsx":"8","C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\UseEffect3Sample\\index.tsx":"9","C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\UseEffect2Sample\\Timer.tsx":"10","C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\UseContext1\\index.tsx":"11","C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\UseContext1\\Grandchild.tsx":"12","C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\UseContext1\\ContextChildren.tsx":"13","C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\UseReducer1\\index.tsx":"14","C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\UseContext1\\AppContext.ts":"15","C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\UseReducer2\\Grandchild.tsx":"16","C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\UseReducer2\\AppContext.ts":"17","C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\UseReducer2\\index.tsx":"18","C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\UseMemo1Sample\\index.tsx":"19","C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\UseMemo2Sample\\index.tsx":"20","C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\Router.ts":"21","C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\UseCallback1Sample\\CountClick.tsx":"22","C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\UseCallback2Sample\\CountClick.tsx":"23","C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\UseCallback3Sample\\index.tsx":"24","C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\UseCallback1Sample\\index.tsx":"25","C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\UseCallback1Sample\\CountDisplay.tsx":"26","C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\UseCallback2Sample\\CountDisplay.tsx":"27","C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\UseCallback3Sample\\CountDisplay.tsx":"28","C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\UseCallback3Sample\\CountClick.tsx":"29","C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\UseCallback2Sample\\index.tsx":"30","C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\AxiosSample\\index.tsx":"31","C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\FetchSample\\index.tsx":"32","C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\ReduxToolKit2\\errorSlice.ts":"33","C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\ReduxToolKit1\\counterSlice.ts":"34","C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\ReduxToolKit1\\index.tsx":"35","C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\ReduxToolKit2\\sampleSlice.ts":"36","C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\ReduxToolKit2\\index.tsx":"37","C:\\Users\\takasaki\\react\\rtk_sample\\src\\app\\store.ts":"38","C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\UseReducer2\\ContextChildren.tsx":"39","C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\ReduxToolKit2\\PostList.tsx":"40","C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\ReduxToolKit2\\PostInput.tsx":"41","C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\MaterialTextfield\\index.tsx":"42"},{"size":648,"mtime":1598236297801,"results":"43","hashOfConfig":"44"},{"size":718,"mtime":1606904376262,"results":"45","hashOfConfig":"44"},{"size":1967,"mtime":1607387482149,"results":"46","hashOfConfig":"44"},{"size":9808,"mtime":1607387468904,"results":"47","hashOfConfig":"44"},{"size":4979,"mtime":1606904753303,"results":"48","hashOfConfig":"44"},{"size":5424,"mtime":1598236297801,"results":"49","hashOfConfig":"44"},{"size":2698,"mtime":1606904835770,"results":"50","hashOfConfig":"44"},{"size":1423,"mtime":1606812150499,"results":"51","hashOfConfig":"44"},{"size":2542,"mtime":1606812175000,"results":"52","hashOfConfig":"44"},{"size":1007,"mtime":1606812506840,"results":"53","hashOfConfig":"44"},{"size":598,"mtime":1606804476965,"results":"54","hashOfConfig":"44"},{"size":464,"mtime":1606801501757,"results":"55","hashOfConfig":"44"},{"size":320,"mtime":1606800186999,"results":"56","hashOfConfig":"44"},{"size":2501,"mtime":1606812328630,"results":"57","hashOfConfig":"44"},{"size":111,"mtime":1606804725836,"results":"58","hashOfConfig":"44"},{"size":1345,"mtime":1606805641421,"results":"59","hashOfConfig":"44"},{"size":367,"mtime":1606805828099,"results":"60","hashOfConfig":"44"},{"size":1590,"mtime":1606805874514,"results":"61","hashOfConfig":"44"},{"size":1806,"mtime":1606812359638,"results":"62","hashOfConfig":"44"},{"size":1360,"mtime":1606812387579,"results":"63","hashOfConfig":"44"},{"size":3360,"mtime":1607387383425,"results":"64","hashOfConfig":"44"},{"size":494,"mtime":1606892610971,"results":"65","hashOfConfig":"44"},{"size":506,"mtime":1606892853701,"results":"66","hashOfConfig":"44"},{"size":1107,"mtime":1606895103885,"results":"67","hashOfConfig":"44"},{"size":1404,"mtime":1606894674384,"results":"68","hashOfConfig":"44"},{"size":328,"mtime":1606892772598,"results":"69","hashOfConfig":"44"},{"size":340,"mtime":1606892815561,"results":"70","hashOfConfig":"44"},{"size":340,"mtime":1606892818135,"results":"71","hashOfConfig":"44"},{"size":506,"mtime":1606892856144,"results":"72","hashOfConfig":"44"},{"size":1070,"mtime":1606894770268,"results":"73","hashOfConfig":"44"},{"size":1842,"mtime":1606957043187,"results":"74","hashOfConfig":"44"},{"size":1603,"mtime":1606957053945,"results":"75","hashOfConfig":"44"},{"size":761,"mtime":1606954753544,"results":"76","hashOfConfig":"44"},{"size":1851,"mtime":1606954823645,"results":"77","hashOfConfig":"44"},{"size":1922,"mtime":1606968533213,"results":"78","hashOfConfig":"44"},{"size":3623,"mtime":1607072195894,"results":"79","hashOfConfig":"44"},{"size":791,"mtime":1607055470286,"results":"80","hashOfConfig":"44"},{"size":649,"mtime":1606970935114,"results":"81","hashOfConfig":"44"},{"size":320,"mtime":1606804418518,"results":"82","hashOfConfig":"44"},{"size":2495,"mtime":1607055120458,"results":"83","hashOfConfig":"44"},{"size":6152,"mtime":1607063071887,"results":"84","hashOfConfig":"44"},{"size":9726,"mtime":1607074984451,"results":"85","hashOfConfig":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},"podxxe",{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"97"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"97"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"97"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"97"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"97"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"97"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},"C:\\Users\\takasaki\\react\\rtk_sample\\src\\index.tsx",[],["179","180"],"C:\\Users\\takasaki\\react\\rtk_sample\\src\\layouts\\main\\Header.tsx",[],"C:\\Users\\takasaki\\react\\rtk_sample\\src\\App.tsx",[],"C:\\Users\\takasaki\\react\\rtk_sample\\src\\layouts\\main\\LeftSideList.tsx",[],"C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\UseStateSample\\index.tsx",[],["181","182"],"C:\\Users\\takasaki\\react\\rtk_sample\\src\\serviceWorker.ts",[],"C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\UseEffect1Sample\\index.tsx",["183"],"import React, { useState, useEffect } from \"react\";\r\nimport styles from \"./useEffect1Sample.module.css\";\r\n\r\nconst UseEffect1Sample: React.FC = () => {\r\n  const [count, setCount] = useState(0);\r\n  const [count2, setCount2] = useState(0);\r\n  const [datetime, setDatetime] = useState<string[]>([]);\r\n\r\n  useEffect(() => {\r\n    const date1 = new Date();\r\n    const date2 =\r\n      date1.getFullYear() +\r\n      \"/\" +\r\n      (date1.getMonth() + 1) +\r\n      \"/\" +\r\n      date1.getDate() +\r\n      \" \" +\r\n      date1.getHours() +\r\n      \":\" +\r\n      date1.getMinutes() +\r\n      \":\" +\r\n      date1.getSeconds();\r\n    setDatetime([...datetime, date2]);\r\n  }, [count]);\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <p>\r\n          useEffectの処理は、画面起動時とstateがリダイレクトされるタイミングで実行される。\r\n        </p>\r\n        <p>\r\n          useEffectの第２引数にcountを指定しているため、ステートの中でcountが変わった場合のみリダイレクトする。\r\n        </p>\r\n        <p>count2が変更されても、useEffectは実行されない。</p>\r\n      </div>\r\n      <div className={styles.row}>\r\n        <div className={styles.inputArea}>\r\n          <div>\r\n            <p>count</p>\r\n            <button\r\n              className={styles.button}\r\n              aria-label=\"Increment value\"\r\n              onClick={() => setCount(count + 1)}\r\n            >\r\n              +\r\n            </button>\r\n            <span className={styles.value}>{count}</span>\r\n            <button\r\n              className={styles.button}\r\n              aria-label=\"Decrement value\"\r\n              onClick={() => setCount(count - 1)}\r\n            >\r\n              -\r\n            </button>\r\n          </div>\r\n          <div>\r\n            <p>count2</p>\r\n            <button\r\n              className={styles.button}\r\n              aria-label=\"Increment value\"\r\n              onClick={() => {\r\n                setCount2(count + 1);\r\n              }}\r\n            >\r\n              +\r\n            </button>\r\n            <span className={styles.value}>{count2}</span>\r\n            <button\r\n              className={styles.button}\r\n              aria-label=\"Decrement value\"\r\n              onClick={() => {\r\n                setCount2(count - 1);\r\n              }}\r\n            >\r\n              -\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <div className={styles.dispArea}>\r\n          {datetime && (\r\n            <ul>\r\n              {datetime.map((date) => (\r\n                <li key={date.length}>{date}</li>\r\n              ))}\r\n            </ul>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UseEffect1Sample;\r\n","C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\UseEffect2Sample\\index.tsx",[],"C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\UseEffect3Sample\\index.tsx",["184"],"import React, { useState, useEffect } from \"react\";\r\nimport styles from \"./useEffect3Sample.module.css\";\r\n\r\nconst UseEffect1Sample: React.FC = () => {\r\n  const [count, setCount] = useState(0);\r\n  const [count2, setCount2] = useState(0);\r\n  const [datetime, setDatetime] = useState<string[]>([]);\r\n\r\n  useEffect(() => {\r\n    const date1 = new Date();\r\n    const date2 =\r\n      date1.getFullYear() +\r\n      \"/\" +\r\n      (date1.getMonth() + 1) +\r\n      \"/\" +\r\n      date1.getDate() +\r\n      \" \" +\r\n      date1.getHours() +\r\n      \":\" +\r\n      date1.getMinutes() +\r\n      \":\" +\r\n      date1.getSeconds();\r\n    setDatetime([...datetime, date2]);\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <p>useEffectの処理は、コンポーネントの起動時に実行される。</p>\r\n        <p>\r\n          useEffectの第２引数にcountを指定していない場合は、コンポーネントの起動時のみ実行する。\r\n        </p>\r\n      </div>\r\n      <div className={styles.row}>\r\n        <div className={styles.inputArea}>\r\n          <div>\r\n            <p>count</p>\r\n            <button\r\n              className={styles.button}\r\n              aria-label=\"Increment value\"\r\n              onClick={() => setCount(count + 1)}\r\n            >\r\n              +\r\n            </button>\r\n            <span className={styles.value}>{count}</span>\r\n            <button\r\n              className={styles.button}\r\n              aria-label=\"Decrement value\"\r\n              onClick={() => setCount(count - 1)}\r\n            >\r\n              -\r\n            </button>\r\n          </div>\r\n          <div>\r\n            <p>count2</p>\r\n            <button\r\n              className={styles.button}\r\n              aria-label=\"Increment value\"\r\n              onClick={() => {\r\n                setCount2(count + 1);\r\n              }}\r\n            >\r\n              +\r\n            </button>\r\n            <span className={styles.value}>{count2}</span>\r\n            <button\r\n              className={styles.button}\r\n              aria-label=\"Decrement value\"\r\n              onClick={() => {\r\n                setCount2(count - 1);\r\n              }}\r\n            >\r\n              -\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <div className={styles.dispArea}>\r\n          {datetime && (\r\n            <ul>\r\n              {datetime.map((date) => (\r\n                <li key={date.length}>{date}</li>\r\n              ))}\r\n            </ul>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UseEffect1Sample;\r\n","C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\UseEffect2Sample\\Timer.tsx",[],"C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\UseContext1\\index.tsx",[],"C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\UseContext1\\Grandchild.tsx",[],"C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\UseContext1\\ContextChildren.tsx",[],"C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\UseReducer1\\index.tsx",[],"C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\UseContext1\\AppContext.ts",[],"C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\UseReducer2\\Grandchild.tsx",[],"C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\UseReducer2\\AppContext.ts",[],"C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\UseReducer2\\index.tsx",[],"C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\UseMemo1Sample\\index.tsx",[],"C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\UseMemo2Sample\\index.tsx",[],"C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\Router.ts",[],"C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\UseCallback1Sample\\CountClick.tsx",[],"C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\UseCallback2Sample\\CountClick.tsx",[],"C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\UseCallback3Sample\\index.tsx",["185","186"],"import React, { useState, useCallback } from \"react\";\r\nimport CountDisplay from \"./CountDisplay\";\r\nimport CountClick from \"./CountClick\";\r\nimport styles from \"./UseCallback3Sample.module.css\";\r\n\r\nconst UseCallback3Sample: React.FC = () => {\r\n  const [count1, setCount1] = useState(0);\r\n  const [count2, setCount2] = useState(0);\r\n\r\n  const AddCount1 = useCallback(() => {\r\n    setCount1((prevCount1) => prevCount1 + 1);\r\n  }, [count1]);\r\n\r\n  const AddCount2 = useCallback(() => {\r\n    setCount2((prevCount2) => prevCount2 + 1);\r\n  }, [count2]);\r\n\r\n  return (\r\n    <div className={styles.row}>\r\n      <p>\r\n        useCallback を使用する事で値の表示時も変更された state\r\n        に対応するコンポーネントのみが\r\n      </p>\r\n      <p>再読み込みされる</p>\r\n      <CountDisplay name=\"count1\" count={count1} />\r\n      <CountClick handleClick={AddCount1}>AddCount1</CountClick>\r\n      <p> </p>\r\n      <CountDisplay name=\"count2\" count={count2} />\r\n      <CountClick handleClick={AddCount2}>AddCount2</CountClick>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UseCallback3Sample;\r\n","C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\UseCallback1Sample\\index.tsx",[],"C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\UseCallback1Sample\\CountDisplay.tsx",[],"C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\UseCallback2Sample\\CountDisplay.tsx",[],"C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\UseCallback3Sample\\CountDisplay.tsx",[],"C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\UseCallback3Sample\\CountClick.tsx",[],"C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\UseCallback2Sample\\index.tsx",[],"C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\AxiosSample\\index.tsx",["187"],"import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport data from \"../data.json\";\r\nimport styles from \"./AxiosSample.module.css\";\r\n\r\ntype DATA = typeof data;\r\n\r\nconst AxiosSample: React.FC = () => {\r\n  const [posts, setPosts] = useState<DATA>({} as DATA);\r\n  const [id, setId] = useState<number>(1);\r\n  const [clicked, setClicked] = useState<boolean>(false);\r\n\r\n  // ボタンクリック時に呼び出される関数\r\n  const handlerClicked = async () => {\r\n    setClicked(!clicked);\r\n  };\r\n\r\n  // カテゴリ入力した際の値\r\n  const handleInputTextChange = (e: React.ChangeEvent<{ value: unknown }>) => {\r\n    const value = e.target.value as number;\r\n    setId(value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // axios でgetした結果は then の後ろに記載する処理で使われる\r\n    // 今回は res に渡す\r\n    const fetch = async () => {\r\n      axios\r\n        .get(`http://jsonplaceholder.typicode.com/posts/${id}`)\r\n        .then((res) => {\r\n          setPosts(res.data);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n\r\n          setPosts({ userId: 0, id: 0, title: \"\", body: \"\" });\r\n        });\r\n    };\r\n    fetch();\r\n\r\n    // ,[clicked]を指定する事で、ボタンクリックした事に反応する\r\n  }, [clicked]);\r\n\r\n  return (\r\n    <div className={styles.row}>\r\n      <input\r\n        type=\"text\"\r\n        value={id}\r\n        onChange={(evt) => handleInputTextChange(evt)}\r\n      />\r\n      <br />\r\n      <button\r\n        type=\"button\"\r\n        className={styles.button}\r\n        onClick={() => {\r\n          handlerClicked();\r\n        }}\r\n      >\r\n        Get post\r\n      </button>\r\n      <br />\r\n      <p> id: {posts.id} </p>\r\n      <p> title: {posts.title} </p>\r\n      <p> body: {posts.body} </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AxiosSample;\r\n","C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\FetchSample\\index.tsx",["188"],"import React, { useState, useEffect } from \"react\";\r\nimport data from \"../data.json\";\r\nimport styles from \"./FetchSample.module.css\";\r\n\r\ntype DATA = typeof data;\r\n\r\nconst FetchSample: React.FC = () => {\r\n  const [posts, setPosts] = useState<DATA>({} as DATA);\r\n  const [id, setId] = useState<number>(1);\r\n  const [clicked, setClicked] = useState<boolean>(false);\r\n\r\n  // ボタンクリック時に呼び出される関数\r\n  const handlerClicked = async () => {\r\n    setClicked(!clicked);\r\n  };\r\n\r\n  // カテゴリ入力した際の値\r\n  const handleInputTextChange = (e: React.ChangeEvent<{ value: unknown }>) => {\r\n    const value = e.target.value as number;\r\n    setId(value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // JavaScripts のfetchメソッドで取得する\r\n    fetch(`http://jsonplaceholder.typicode.com/posts/${id}`, {\r\n      method: \"GET\",\r\n    })\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        setPosts(data);\r\n      });\r\n\r\n    // ,[clicked]を指定する事で、ボタンクリックした事に反応する\r\n  }, [clicked]);\r\n\r\n  return (\r\n    <div className={styles.row}>\r\n      <input\r\n        type=\"text\"\r\n        value={id}\r\n        onChange={(evt) => handleInputTextChange(evt)}\r\n      />\r\n      <br />\r\n      <button\r\n        type=\"button\"\r\n        className={styles.button}\r\n        onClick={() => {\r\n          handlerClicked();\r\n        }}\r\n      >\r\n        Get post\r\n      </button>\r\n      <br />\r\n      <p> id: {posts.id} </p>\r\n      <p> title: {posts.title} </p>\r\n      <p> body: {posts.body} </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FetchSample;\r\n","C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\ReduxToolKit2\\errorSlice.ts",["189"],"import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { AppThunk, RootState } from \"../../app/store\";\r\n\r\ninterface CounterState {\r\n  value: number;\r\n}\r\n\r\nconst initialState: CounterState = {\r\n  value: 0,\r\n};\r\n\r\nexport const errorSlice = createSlice({\r\n  name: \"error\",\r\n  initialState,\r\n  reducers: {\r\n    increment: (state) => {\r\n      state.value += 1;\r\n    },\r\n    decrement: (state) => {\r\n      state.value -= 1;\r\n    },\r\n\r\n    incrementByAmount: (state, action: PayloadAction<number>) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = errorSlice.actions;\r\n\r\nexport const selectCount = (state: RootState) => state.error.value;\r\n\r\nexport default errorSlice.reducer;\r\n","C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\ReduxToolKit1\\counterSlice.ts",[],"C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\ReduxToolKit1\\index.tsx",[],"C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\ReduxToolKit2\\sampleSlice.ts",["190","191","192"],"import { createSlice, PayloadAction, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"../../app/store\";\r\nimport data from \"../data.json\";\r\nimport axios from \"axios\";\r\n\r\ntype POST = typeof data;\r\n\r\ninterface SAMPLE_DATA {\r\n  allPosts: POST[];\r\n  selectedPost: POST;\r\n}\r\ntype UPDATE_POST = {\r\n  id: number;\r\n};\r\n\r\nconst API_URL = \"https://jsonplaceholder.typicode.com/posts/\";\r\n\r\n// サンプルデータの取得\r\nexport const fetchAsyncGet = createAsyncThunk(\"sample/get\", async () => {\r\n  const res = await axios.get<POST[]>(API_URL);\r\n  return res.data;\r\n});\r\n// サンプルデータの新規作成（正常終了と返ってくるがデータは登録されていない）\r\nexport const fetchAsyncCreate = createAsyncThunk(\r\n  \"sample/create\",\r\n  async (post: POST) => {\r\n    const res = await axios.post<UPDATE_POST>(`${API_URL}`, {\r\n      userid: post.userId,\r\n      title: post.title,\r\n      body: post.body,\r\n    });\r\n    // return res.data;\r\n    return post;\r\n  }\r\n);\r\n// サンプルデータの更新\r\nexport const fetchAsyncUpdate = createAsyncThunk(\r\n  \"sample/update\",\r\n  async (post: POST) => {\r\n    console.log(\"URL=\" + `${API_URL}${post.id}/`);\r\n    const res = await axios.put<UPDATE_POST>(`${API_URL}${post.id}/`, post);\r\n    // return res.data;\r\n    return post;\r\n  }\r\n);\r\n// サンプルデータの削除\r\nexport const fetchAsyncDelete = createAsyncThunk(\r\n  \"sample/delete\",\r\n  async (id: number) => {\r\n    await axios.delete(`${API_URL}${id}/`);\r\n    return id;\r\n  }\r\n);\r\nexport const initialState: SAMPLE_DATA = {\r\n  allPosts: [{} as POST],\r\n  selectedPost: {\r\n    userId: 0,\r\n    id: 0,\r\n    title: \"\",\r\n    body: \"\",\r\n  },\r\n};\r\n\r\nexport const sampleSlice = createSlice({\r\n  name: \"sample\",\r\n  initialState,\r\n  reducers: {\r\n    selectPost(state, action: PayloadAction<POST>) {\r\n      state.selectedPost = action.payload;\r\n    },\r\n    editPost(state, action: PayloadAction<POST>) {\r\n      state.selectedPost = action.payload;\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    // タスクの取得が正常終了\r\n    builder.addCase(\r\n      fetchAsyncGet.fulfilled,\r\n      (state, action: PayloadAction<POST[]>) => {\r\n        return {\r\n          ...state,\r\n          allPosts: action.payload,\r\n        };\r\n      }\r\n    );\r\n    // タスクの新規作成が正常終了\r\n    builder.addCase(\r\n      fetchAsyncCreate.fulfilled,\r\n      (state, action: PayloadAction<POST>) => {\r\n        return {\r\n          ...state,\r\n          allPosts: [action.payload, ...state.allPosts],\r\n          selectedPost: initialState.selectedPost,\r\n        };\r\n      }\r\n    );\r\n    // タスクの更新の正常終了\r\n    builder.addCase(\r\n      fetchAsyncUpdate.fulfilled,\r\n      (state, action: PayloadAction<POST>) => {\r\n        return {\r\n          ...state,\r\n          allPosts: state.allPosts.map((p) =>\r\n            p.id === action.payload.id ? action.payload : p\r\n          ),\r\n          selectedPost: initialState.selectedPost,\r\n        };\r\n      }\r\n    );\r\n\r\n    // タスクの削除の正常終了\r\n    builder.addCase(\r\n      fetchAsyncDelete.fulfilled,\r\n      (state, action: PayloadAction<number>) => {\r\n        return {\r\n          ...state,\r\n          allPosts: state.allPosts.filter((p) => p.id !== action.payload),\r\n          selectedPost: initialState.selectedPost,\r\n        };\r\n      }\r\n    );\r\n  },\r\n});\r\n\r\nexport const { selectPost, editPost } = sampleSlice.actions;\r\n\r\nexport const selectAllPosts = (state: RootState) => state.sample.allPosts;\r\nexport const selectSelecedtPost = (state: RootState) =>\r\n  state.sample.selectedPost;\r\n\r\nexport default sampleSlice.reducer;\r\n","C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\ReduxToolKit2\\index.tsx",["193"],"C:\\Users\\takasaki\\react\\rtk_sample\\src\\app\\store.ts",[],"C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\UseReducer2\\ContextChildren.tsx",[],"C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\ReduxToolKit2\\PostList.tsx",[],"C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\ReduxToolKit2\\PostInput.tsx",[],"C:\\Users\\takasaki\\react\\rtk_sample\\src\\views\\MaterialTextfield\\index.tsx",[],{"ruleId":"194","replacedBy":"195"},{"ruleId":"196","replacedBy":"197"},{"ruleId":"194","replacedBy":"198"},{"ruleId":"196","replacedBy":"199"},{"ruleId":"200","severity":1,"message":"201","line":24,"column":6,"nodeType":"202","endLine":24,"endColumn":13,"suggestions":"203"},{"ruleId":"200","severity":1,"message":"201","line":24,"column":6,"nodeType":"202","endLine":24,"endColumn":8,"suggestions":"204"},{"ruleId":"200","severity":1,"message":"205","line":12,"column":6,"nodeType":"202","endLine":12,"endColumn":14,"suggestions":"206"},{"ruleId":"200","severity":1,"message":"207","line":16,"column":6,"nodeType":"202","endLine":16,"endColumn":14,"suggestions":"208"},{"ruleId":"200","severity":1,"message":"209","line":42,"column":6,"nodeType":"202","endLine":42,"endColumn":15,"suggestions":"210"},{"ruleId":"200","severity":1,"message":"209","line":34,"column":6,"nodeType":"202","endLine":34,"endColumn":15,"suggestions":"211"},{"ruleId":"212","severity":1,"message":"213","line":2,"column":10,"nodeType":"214","messageId":"215","endLine":2,"endColumn":18},{"ruleId":"212","severity":1,"message":"216","line":27,"column":11,"nodeType":"214","messageId":"215","endLine":27,"endColumn":14},{"ruleId":"217","severity":1,"message":"218","line":40,"column":24,"nodeType":"219","messageId":"220","endLine":40,"endColumn":25},{"ruleId":"212","severity":1,"message":"216","line":41,"column":11,"nodeType":"214","messageId":"215","endLine":41,"endColumn":14},{"ruleId":"200","severity":1,"message":"221","line":18,"column":6,"nodeType":"202","endLine":18,"endColumn":8,"suggestions":"222"},"no-native-reassign",["223"],"no-negated-in-lhs",["224"],["223"],["224"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'datetime'. Either include it or remove the dependency array. You can also do a functional update 'setDatetime(d => ...)' if you only need 'datetime' in the 'setDatetime' call.","ArrayExpression",["225"],["226"],"React Hook useCallback has an unnecessary dependency: 'count1'. Either exclude it or remove the dependency array.",["227"],"React Hook useCallback has an unnecessary dependency: 'count2'. Either exclude it or remove the dependency array.",["228"],"React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["229"],["230"],"@typescript-eslint/no-unused-vars","'AppThunk' is defined but never used.","Identifier","unusedVar","'res' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["231"],"no-global-assign","no-unsafe-negation",{"desc":"232","fix":"233"},{"desc":"234","fix":"235"},{"desc":"236","fix":"237"},{"desc":"236","fix":"238"},{"desc":"239","fix":"240"},{"desc":"239","fix":"241"},{"desc":"242","fix":"243"},"Update the dependencies array to be: [count, datetime]",{"range":"244","text":"245"},"Update the dependencies array to be: [datetime]",{"range":"246","text":"247"},"Update the dependencies array to be: []",{"range":"248","text":"249"},{"range":"250","text":"249"},"Update the dependencies array to be: [clicked, id]",{"range":"251","text":"252"},{"range":"253","text":"252"},"Update the dependencies array to be: [dispatch]",{"range":"254","text":"255"},[647,654],"[count, datetime]",[647,649],"[datetime]",[426,434],"[]",[534,542],[1136,1145],"[clicked, id]",[931,940],[533,535],"[dispatch]"]